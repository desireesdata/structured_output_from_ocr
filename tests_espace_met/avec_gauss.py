import numpy as np
from Levenshtein import distance as lev
from scipy.ndimage import gaussian_filter

# Donn√©es
T = ["s√©nat", "loi", "1931", "740", "8"]
P = ["semat", "l0i", "1931", "74O"]

# Param√®tres
sigma = 1.0  # √©cart-type pour le flou gaussien
epsilon = 0.1  # tol√©rance sur le min local

# √âtape 1 : calcul de la matrice de distance
D = np.array([[lev(p, t) for t in T] for p in P])
print("üî¢ Matrice de distance D (P x T):\n", D)

# √âtape 2 : convolution gaussienne
D_smooth = gaussian_filter(D, sigma=sigma)
print("\nüå´Ô∏è Matrice liss√©e D_smooth :\n", np.round(D_smooth, 2))

# √âtape 3 : appariement mutuel brut
P_to_T = np.argmin(D, axis=1)
T_to_P = np.argmin(D, axis=0)
mutual_pairs = [(i, j) for i, j in enumerate(P_to_T) if T_to_P[j] == i]

# √âtape 4 : filtre par minima locaux dans D_smooth
def is_local_min(i, j):
    neighborhood = D_smooth[max(0, i-1):i+2, max(0, j-1):j+2]
    return D_smooth[i, j] <= np.min(neighborhood) + epsilon

filtered_pairs = []
print("\nüîç Appariements filtr√©s par convolution :")
for i, j in mutual_pairs:
    if is_local_min(i, j):
        print(f"  ‚úÖ {P[i]} ‚ü∑ {T[j]} [min local]")
        filtered_pairs.append((i, j))
    else:
        print(f"  ‚ùå {P[i]} ‚ü∑ {T[j]} rejet√© (pas un minimum local)")

# R√©sultat final
print("\nüìå Appariements valides finaux :")
for i, j in filtered_pairs:
    print(f"  {P[i]} ‚Üî {T[j]}")
